//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.16

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "activity_stream")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub activity_id: Uuid,
    #[sea_orm(primary_key, auto_increment = false)]
    pub time: DateTimeWithTimeZone,
    #[sea_orm(column_type = "Double", nullable)]
    pub latitude: Option<f64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub longitude: Option<f64>,
    #[sea_orm(column_type = "Float", nullable)]
    pub altitude: Option<f32>,
    pub heart_rate: Option<i32>,
    pub cadence: Option<i32>,
    #[sea_orm(column_type = "Float", nullable)]
    pub watts: Option<f32>,
    #[sea_orm(column_type = "Float", nullable)]
    pub velocity: Option<f32>,
    #[sea_orm(column_type = "Float", nullable)]
    pub distance: Option<f32>,
    #[sea_orm(column_type = "Float", nullable)]
    pub temperature: Option<f32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::activity::Entity",
        from = "Column::ActivityId",
        to = "super::activity::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Activity,
}

impl Related<super::activity::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Activity.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
